3130 3636             # magic number
0000 0002             # unsigned block count

6d61 696e             # function name, main
00 
0000 0000             # annotations, executable 
0000 0002 
0000 0000             # frame size
0000 0034             # contents length
1caa 0001             # ldblkid aa <-- blk[01]
0e01 0000             # ldimm   01 <-- 0000 
0e02 7fff             # ldimm   02 <-- 7FFF 
0e03 ffff             # ldimm   03 <-- FFFF 
90f0 aa03             # doInitProc id in f0, func=01, args=2
0e01 7fff             # ldimm   01 <-- 7FFF 
0e02 ffff             # ldimm   02 <-- FFFF  
0e03 ffff             # ldimm   03 <-- FFFF 
90f1 aa03             # doInitProc id in f1, func=01, args=2
91f0 a000             # join    id in f0, ret in a0 
91f1 a100             # join    id in f1, ret in a1 
2ba0 a0a1             # addd    a0 <-- a0 + a1 
74ff a0ff             # ret     a0 
0000 0000             # unsigned number of exception handlers
0000 0000             # unsigned outsymbol references
0000 0000             # unsigned native function references
0000 0000             # auxiliary data length

776f 726b             # function name, work
00 
0000 0000             # annotations, executable 
0000 0002 
0000 0000             # frame size
0000 0080             # contents length
### Get arguments passed in and convert to doubles
300a 0100             # cvtld   0a <-- 01       (Start point) 
300c 0200             # cvtld   0c <-- 02       (End point)
30b2 0300             # cvtld   b2 <-- 03       (Total number of points)
### Initialize some variables and conver to  doubles
0e0b 0001             # ldimm   0b <-- 1
0e0d 0000             # ldimm   0d <-- 0
300d 0d00             # cvtld   0d <-- 0d 
30b1 0b00             # cvtld   b1 <-- 0b 
### Calculate dx and initial x
2eba b1b2             # divd    ba <-- b1 / b2  (dx)
2e0d 0a0c             # divd    0d <-- 0a / 0c  (Inital x)
### Initialize temp variables and convert to doubles
0ec0 0000             # ldimm   c0 <-- 0
0ec1 0000             # ldimm   c1 <-- 0
0ec2 0000             # ldimm   c2 <-- 0
0ec3 0001             # ldimm   c3 <-- 1
0ec4 0004             # ldimm   c4 <-- 4
0ec5 0000             # ldimm   c5 <-- 0
30c0 c000             # cvtld   c0 <-- c0 
30c1 c100             # cvtld   c1 <-- c1 
30c2 c200             # cvtld   c2 <-- c2 
30c3 c300             # cvtld   c3 <-- c3 
30c4 c400             # cvtld   c4 <-- c4 
30c5 c500             # cvtld   c5 <-- c5       (sum)
###
### Main integration for loop
###
44aa 0102             # cmplt   aa <-- 01 < 02 
53aa 0008             # bfalse  aa == 0 ==> CIO <-- CIO + 08*4
### Actual integration
2dc0 0d0d             # addd    c0 <-- 0d * 0d  (c0 = x * x)
2bc1 c3c0             # addd    c1 <-- c3 + c0  (c1 = 1.0 + (x * x))
2ec2 c4c1             # divd    c2 <-- c4 / c1  (c2 = 4 / (1.0 + (x * x)))
2dc2 c2ba             # muld    c2 <-- c2 * ba  (c2 = 4 / (1.0 + (x * x)) * dx)
2bc5 c5c2             # addd    c5 <-- c5 + c2  (sum += 4 / (1.0 + (x * x)) * dx)
2b0d 0dba             # addd    0d <-- 0d + ba  (x += dx)
2101 0101             # addl    01 <-- 01 + 1   (i++)
### Jump back to the start of the for loop
5000 fff6             # jmp     CIO <-- CIO +   (-9*4) 
74c5 ffff             # ret     c5 
0000 0000             # unsigned number of exception handlers
0000 0000             # unsigned outsymbol references
0000 0000             # unsigned native function references
0000 0000             # auxiliary data length

